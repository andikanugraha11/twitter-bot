// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/twitter/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	twitter "github.com/ghazimuharam/go-twitter/twitter"
	entity "github.com/ghazimuharam/twitter-bot/internal/twitter/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockDirectMessageRepoItf is a mock of DirectMessageRepoItf interface.
type MockDirectMessageRepoItf struct {
	ctrl     *gomock.Controller
	recorder *MockDirectMessageRepoItfMockRecorder
}

// MockDirectMessageRepoItfMockRecorder is the mock recorder for MockDirectMessageRepoItf.
type MockDirectMessageRepoItfMockRecorder struct {
	mock *MockDirectMessageRepoItf
}

// NewMockDirectMessageRepoItf creates a new mock instance.
func NewMockDirectMessageRepoItf(ctrl *gomock.Controller) *MockDirectMessageRepoItf {
	mock := &MockDirectMessageRepoItf{ctrl: ctrl}
	mock.recorder = &MockDirectMessageRepoItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectMessageRepoItf) EXPECT() *MockDirectMessageRepoItfMockRecorder {
	return m.recorder
}

// DeleteDirectMessages mocks base method.
func (m *MockDirectMessageRepoItf) DeleteDirectMessages(directMsgID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectMessages", directMsgID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectMessages indicates an expected call of DeleteDirectMessages.
func (mr *MockDirectMessageRepoItfMockRecorder) DeleteDirectMessages(directMsgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectMessages", reflect.TypeOf((*MockDirectMessageRepoItf)(nil).DeleteDirectMessages), directMsgID)
}

// GetDirectMessages mocks base method.
func (m *MockDirectMessageRepoItf) GetDirectMessages(cursor string) (*twitter.DirectMessageEvents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectMessages", cursor)
	ret0, _ := ret[0].(*twitter.DirectMessageEvents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectMessages indicates an expected call of GetDirectMessages.
func (mr *MockDirectMessageRepoItfMockRecorder) GetDirectMessages(cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectMessages", reflect.TypeOf((*MockDirectMessageRepoItf)(nil).GetDirectMessages), cursor)
}

// GetMediaFromDirectMessage mocks base method.
func (m *MockDirectMessageRepoItf) GetMediaFromDirectMessage(mediaURL string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaFromDirectMessage", mediaURL)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMediaFromDirectMessage indicates an expected call of GetMediaFromDirectMessage.
func (mr *MockDirectMessageRepoItfMockRecorder) GetMediaFromDirectMessage(mediaURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaFromDirectMessage", reflect.TypeOf((*MockDirectMessageRepoItf)(nil).GetMediaFromDirectMessage), mediaURL)
}

// SendDirectMessage mocks base method.
func (m *MockDirectMessageRepoItf) SendDirectMessage(tweet, recipientID string) (*twitter.DirectMessageEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDirectMessage", tweet, recipientID)
	ret0, _ := ret[0].(*twitter.DirectMessageEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDirectMessage indicates an expected call of SendDirectMessage.
func (mr *MockDirectMessageRepoItfMockRecorder) SendDirectMessage(tweet, recipientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDirectMessage", reflect.TypeOf((*MockDirectMessageRepoItf)(nil).SendDirectMessage), tweet, recipientID)
}

// MockTweetRepoItf is a mock of TweetRepoItf interface.
type MockTweetRepoItf struct {
	ctrl     *gomock.Controller
	recorder *MockTweetRepoItfMockRecorder
}

// MockTweetRepoItfMockRecorder is the mock recorder for MockTweetRepoItf.
type MockTweetRepoItfMockRecorder struct {
	mock *MockTweetRepoItf
}

// NewMockTweetRepoItf creates a new mock instance.
func NewMockTweetRepoItf(ctrl *gomock.Controller) *MockTweetRepoItf {
	mock := &MockTweetRepoItf{ctrl: ctrl}
	mock.recorder = &MockTweetRepoItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTweetRepoItf) EXPECT() *MockTweetRepoItfMockRecorder {
	return m.recorder
}

// CreateTweet mocks base method.
func (m *MockTweetRepoItf) CreateTweet(arg0 entity.Tweet) (*twitter.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTweet", arg0)
	ret0, _ := ret[0].(*twitter.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTweet indicates an expected call of CreateTweet.
func (mr *MockTweetRepoItfMockRecorder) CreateTweet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTweet", reflect.TypeOf((*MockTweetRepoItf)(nil).CreateTweet), arg0)
}

// MockMediaRepoItf is a mock of MediaRepoItf interface.
type MockMediaRepoItf struct {
	ctrl     *gomock.Controller
	recorder *MockMediaRepoItfMockRecorder
}

// MockMediaRepoItfMockRecorder is the mock recorder for MockMediaRepoItf.
type MockMediaRepoItfMockRecorder struct {
	mock *MockMediaRepoItf
}

// NewMockMediaRepoItf creates a new mock instance.
func NewMockMediaRepoItf(ctrl *gomock.Controller) *MockMediaRepoItf {
	mock := &MockMediaRepoItf{ctrl: ctrl}
	mock.recorder = &MockMediaRepoItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaRepoItf) EXPECT() *MockMediaRepoItfMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockMediaRepoItf) Upload(media []byte, mediaType string) (*twitter.MediaUploadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", media, mediaType)
	ret0, _ := ret[0].(*twitter.MediaUploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockMediaRepoItfMockRecorder) Upload(media, mediaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockMediaRepoItf)(nil).Upload), media, mediaType)
}

// MockCacheRepoItf is a mock of CacheRepoItf interface.
type MockCacheRepoItf struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepoItfMockRecorder
}

// MockCacheRepoItfMockRecorder is the mock recorder for MockCacheRepoItf.
type MockCacheRepoItfMockRecorder struct {
	mock *MockCacheRepoItf
}

// NewMockCacheRepoItf creates a new mock instance.
func NewMockCacheRepoItf(ctrl *gomock.Controller) *MockCacheRepoItf {
	mock := &MockCacheRepoItf{ctrl: ctrl}
	mock.recorder = &MockCacheRepoItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepoItf) EXPECT() *MockCacheRepoItfMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCacheRepoItf) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheRepoItfMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheRepoItf)(nil).Get), key)
}

// Set mocks base method.
func (m *MockCacheRepoItf) Set(key string, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockCacheRepoItfMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheRepoItf)(nil).Set), key, value)
}
