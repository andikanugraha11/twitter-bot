// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/twitter/repository/client/client.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	twitter "github.com/ghazimuharam/go-twitter/twitter"
	gomock "github.com/golang/mock/gomock"
)

// MockTwitterClientWrapperItf is a mock of TwitterClientWrapperItf interface.
type MockTwitterClientWrapperItf struct {
	ctrl     *gomock.Controller
	recorder *MockTwitterClientWrapperItfMockRecorder
}

// MockTwitterClientWrapperItfMockRecorder is the mock recorder for MockTwitterClientWrapperItf.
type MockTwitterClientWrapperItfMockRecorder struct {
	mock *MockTwitterClientWrapperItf
}

// NewMockTwitterClientWrapperItf creates a new mock instance.
func NewMockTwitterClientWrapperItf(ctrl *gomock.Controller) *MockTwitterClientWrapperItf {
	mock := &MockTwitterClientWrapperItf{ctrl: ctrl}
	mock.recorder = &MockTwitterClientWrapperItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwitterClientWrapperItf) EXPECT() *MockTwitterClientWrapperItfMockRecorder {
	return m.recorder
}

// CreateTweet mocks base method.
func (m *MockTwitterClientWrapperItf) CreateTweet(status string, params *twitter.StatusUpdateParams) (*twitter.Tweet, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTweet", status, params)
	ret0, _ := ret[0].(*twitter.Tweet)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTweet indicates an expected call of CreateTweet.
func (mr *MockTwitterClientWrapperItfMockRecorder) CreateTweet(status, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTweet", reflect.TypeOf((*MockTwitterClientWrapperItf)(nil).CreateTweet), status, params)
}

// DeleteDirectMessages mocks base method.
func (m *MockTwitterClientWrapperItf) DeleteDirectMessages(directMsgID string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectMessages", directMsgID)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectMessages indicates an expected call of DeleteDirectMessages.
func (mr *MockTwitterClientWrapperItfMockRecorder) DeleteDirectMessages(directMsgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectMessages", reflect.TypeOf((*MockTwitterClientWrapperItf)(nil).DeleteDirectMessages), directMsgID)
}

// GetDirectMessages mocks base method.
func (m *MockTwitterClientWrapperItf) GetDirectMessages(params *twitter.DirectMessageEventsListParams) (*twitter.DirectMessageEvents, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectMessages", params)
	ret0, _ := ret[0].(*twitter.DirectMessageEvents)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDirectMessages indicates an expected call of GetDirectMessages.
func (mr *MockTwitterClientWrapperItfMockRecorder) GetDirectMessages(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectMessages", reflect.TypeOf((*MockTwitterClientWrapperItf)(nil).GetDirectMessages), params)
}

// SendDirectMessage mocks base method.
func (m *MockTwitterClientWrapperItf) SendDirectMessage(params *twitter.DirectMessageEventsNewParams) (*twitter.DirectMessageEvent, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDirectMessage", params)
	ret0, _ := ret[0].(*twitter.DirectMessageEvent)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendDirectMessage indicates an expected call of SendDirectMessage.
func (mr *MockTwitterClientWrapperItfMockRecorder) SendDirectMessage(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDirectMessage", reflect.TypeOf((*MockTwitterClientWrapperItf)(nil).SendDirectMessage), params)
}

// UploadMedia mocks base method.
func (m *MockTwitterClientWrapperItf) UploadMedia(media []byte, mediaType string) (*twitter.MediaUploadResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadMedia", media, mediaType)
	ret0, _ := ret[0].(*twitter.MediaUploadResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadMedia indicates an expected call of UploadMedia.
func (mr *MockTwitterClientWrapperItfMockRecorder) UploadMedia(media, mediaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadMedia", reflect.TypeOf((*MockTwitterClientWrapperItf)(nil).UploadMedia), media, mediaType)
}
