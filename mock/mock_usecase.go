// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/twitter/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	twitter "github.com/ghazimuharam/go-twitter/twitter"
	entity "github.com/ghazimuharam/twitter-bot/internal/twitter/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockTweetUCItf is a mock of TweetUCItf interface.
type MockTweetUCItf struct {
	ctrl     *gomock.Controller
	recorder *MockTweetUCItfMockRecorder
}

// MockTweetUCItfMockRecorder is the mock recorder for MockTweetUCItf.
type MockTweetUCItfMockRecorder struct {
	mock *MockTweetUCItf
}

// NewMockTweetUCItf creates a new mock instance.
func NewMockTweetUCItf(ctrl *gomock.Controller) *MockTweetUCItf {
	mock := &MockTweetUCItf{ctrl: ctrl}
	mock.recorder = &MockTweetUCItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTweetUCItf) EXPECT() *MockTweetUCItfMockRecorder {
	return m.recorder
}

// CreateTweet mocks base method.
func (m *MockTweetUCItf) CreateTweet(arg0 entity.Tweet) (*twitter.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTweet", arg0)
	ret0, _ := ret[0].(*twitter.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTweet indicates an expected call of CreateTweet.
func (mr *MockTweetUCItfMockRecorder) CreateTweet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTweet", reflect.TypeOf((*MockTweetUCItf)(nil).CreateTweet), arg0)
}

// MockMediaUCItf is a mock of MediaUCItf interface.
type MockMediaUCItf struct {
	ctrl     *gomock.Controller
	recorder *MockMediaUCItfMockRecorder
}

// MockMediaUCItfMockRecorder is the mock recorder for MockMediaUCItf.
type MockMediaUCItfMockRecorder struct {
	mock *MockMediaUCItf
}

// NewMockMediaUCItf creates a new mock instance.
func NewMockMediaUCItf(ctrl *gomock.Controller) *MockMediaUCItf {
	mock := &MockMediaUCItf{ctrl: ctrl}
	mock.recorder = &MockMediaUCItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaUCItf) EXPECT() *MockMediaUCItfMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockMediaUCItf) Upload(media []byte, mediaType string) (*twitter.MediaUploadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", media, mediaType)
	ret0, _ := ret[0].(*twitter.MediaUploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockMediaUCItfMockRecorder) Upload(media, mediaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockMediaUCItf)(nil).Upload), media, mediaType)
}

// MockDirectMessageUCItf is a mock of DirectMessageUCItf interface.
type MockDirectMessageUCItf struct {
	ctrl     *gomock.Controller
	recorder *MockDirectMessageUCItfMockRecorder
}

// MockDirectMessageUCItfMockRecorder is the mock recorder for MockDirectMessageUCItf.
type MockDirectMessageUCItfMockRecorder struct {
	mock *MockDirectMessageUCItf
}

// NewMockDirectMessageUCItf creates a new mock instance.
func NewMockDirectMessageUCItf(ctrl *gomock.Controller) *MockDirectMessageUCItf {
	mock := &MockDirectMessageUCItf{ctrl: ctrl}
	mock.recorder = &MockDirectMessageUCItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectMessageUCItf) EXPECT() *MockDirectMessageUCItfMockRecorder {
	return m.recorder
}

// DeleteDirectMessages mocks base method.
func (m *MockDirectMessageUCItf) DeleteDirectMessages(directMsgID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectMessages", directMsgID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectMessages indicates an expected call of DeleteDirectMessages.
func (mr *MockDirectMessageUCItfMockRecorder) DeleteDirectMessages(directMsgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectMessages", reflect.TypeOf((*MockDirectMessageUCItf)(nil).DeleteDirectMessages), directMsgID)
}

// GetCleanDirectMessages mocks base method.
func (m *MockDirectMessageUCItf) GetCleanDirectMessages(cursor, lastDirectMsgID string, numberOfDM int) (*twitter.DirectMessageEvents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCleanDirectMessages", cursor, lastDirectMsgID, numberOfDM)
	ret0, _ := ret[0].(*twitter.DirectMessageEvents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCleanDirectMessages indicates an expected call of GetCleanDirectMessages.
func (mr *MockDirectMessageUCItfMockRecorder) GetCleanDirectMessages(cursor, lastDirectMsgID, numberOfDM interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCleanDirectMessages", reflect.TypeOf((*MockDirectMessageUCItf)(nil).GetCleanDirectMessages), cursor, lastDirectMsgID, numberOfDM)
}

// GetDirectMessages mocks base method.
func (m *MockDirectMessageUCItf) GetDirectMessages(cursor string) (*twitter.DirectMessageEvents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectMessages", cursor)
	ret0, _ := ret[0].(*twitter.DirectMessageEvents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectMessages indicates an expected call of GetDirectMessages.
func (mr *MockDirectMessageUCItfMockRecorder) GetDirectMessages(cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectMessages", reflect.TypeOf((*MockDirectMessageUCItf)(nil).GetDirectMessages), cursor)
}

// GetMediaFromDirectMessage mocks base method.
func (m *MockDirectMessageUCItf) GetMediaFromDirectMessage(mediaURL string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaFromDirectMessage", mediaURL)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMediaFromDirectMessage indicates an expected call of GetMediaFromDirectMessage.
func (mr *MockDirectMessageUCItfMockRecorder) GetMediaFromDirectMessage(mediaURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaFromDirectMessage", reflect.TypeOf((*MockDirectMessageUCItf)(nil).GetMediaFromDirectMessage), mediaURL)
}

// SendDirectMessage mocks base method.
func (m *MockDirectMessageUCItf) SendDirectMessage(tweet, recipientID string) (*twitter.DirectMessageEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDirectMessage", tweet, recipientID)
	ret0, _ := ret[0].(*twitter.DirectMessageEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDirectMessage indicates an expected call of SendDirectMessage.
func (mr *MockDirectMessageUCItfMockRecorder) SendDirectMessage(tweet, recipientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDirectMessage", reflect.TypeOf((*MockDirectMessageUCItf)(nil).SendDirectMessage), tweet, recipientID)
}

// MockCronUCitf is a mock of CronUCitf interface.
type MockCronUCitf struct {
	ctrl     *gomock.Controller
	recorder *MockCronUCitfMockRecorder
}

// MockCronUCitfMockRecorder is the mock recorder for MockCronUCitf.
type MockCronUCitfMockRecorder struct {
	mock *MockCronUCitf
}

// NewMockCronUCitf creates a new mock instance.
func NewMockCronUCitf(ctrl *gomock.Controller) *MockCronUCitf {
	mock := &MockCronUCitf{ctrl: ctrl}
	mock.recorder = &MockCronUCitfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronUCitf) EXPECT() *MockCronUCitfMockRecorder {
	return m.recorder
}

// TweetFromDirectMessage mocks base method.
func (m *MockCronUCitf) TweetFromDirectMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TweetFromDirectMessage")
}

// TweetFromDirectMessage indicates an expected call of TweetFromDirectMessage.
func (mr *MockCronUCitfMockRecorder) TweetFromDirectMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TweetFromDirectMessage", reflect.TypeOf((*MockCronUCitf)(nil).TweetFromDirectMessage))
}
